[
  {
    "name": "DragAndDrop",
    "comment": " A low- and high-level interface to mouse drag and drop actions.\n\n# The high-level interface\n@docs Action, track, trackMany\n\n# The low-level interface\n@docs MouseEvent, mouseEvents\n\n# An automaton\n@docs Input, automaton\n",
    "aliases": [],
    "types": [
      {
        "name": "Action",
        "comment": " A type for actions performed on draggable items. ",
        "args": [],
        "cases": [
          [
            "Lift",
            []
          ],
          [
            "MoveBy",
            [
              "( Int, Int )"
            ]
          ],
          [
            "Release",
            []
          ]
        ]
      },
      {
        "name": "Input",
        "comment": " Input type for [`automaton`](#automaton). ",
        "args": [
          "a"
        ],
        "cases": [
          [
            "Mouse",
            [
              "DragAndDrop.MouseEvent"
            ]
          ],
          [
            "Hover",
            [
              "Maybe.Maybe a"
            ]
          ]
        ]
      },
      {
        "name": "MouseEvent",
        "comment": " A type for individual events in a drag and drop sequence. ",
        "args": [],
        "cases": [
          [
            "StartAt",
            [
              "( Int, Int )"
            ]
          ],
          [
            "MoveFromTo",
            [
              "( Int, Int )",
              "( Int, Int )"
            ]
          ],
          [
            "EndAt",
            [
              "( Int, Int )"
            ]
          ]
        ]
      }
    ],
    "values": [
      {
        "name": "automaton",
        "comment": " An [Automaton](http://package.elm-lang.org/packages/evancz/automaton/latest)\nthat can be used in specific situations where [`track`](#track)/[`trackMany`](#trackMany) are\nnot applicable. See\n[Example4.elm](https://github.com/jvoigtlaender/elm-drag-and-drop/blob/master/Example4.elm).\nThe automaton is also used internally in the [`track`](#track) and [`trackMany`](#trackMany)\nfunctions. ",
        "type": "Maybe.Maybe a -> Automaton.Automaton (DragAndDrop.Input a) (Maybe.Maybe ( a, DragAndDrop.Action ))"
      },
      {
        "name": "mouseEvents",
        "comment": " A signal of drag and drop sequence events, fed by `Mouse.isDown`\nand `Mouse.position`. A possible history of this signal could be\n`StartAt (10,10)`, `MoveFromTo (10,10) (12,10)`, `MoveFromTo (12,10) (13,8)`,\n`EndAt (13,8)`, `StartAt (20,15)`, `MoveFromTo (20,15) (22,18)`,\n`EndAt (22,18)`, ... ",
        "type": "Signal.Signal DragAndDrop.MouseEvent"
      },
      {
        "name": "track",
        "comment": " Track a single draggable item. The `Bool` and `Signal Bool`\narguments are the initial value and input signal which tell whether\nthe mouse is (currently) hovering over the draggable item. An example\nuse\n([Example1.elm](https://github.com/jvoigtlaender/elm-drag-and-drop/blob/master/Example1.elm)):\n\n    hover = Signal.mailbox False\n    \n    box = Graphics.Input.hoverable (Signal.message hover.address)\n                                   (putInBox (leftAligned (fromString \"drag-and-drop me\")))\n    \n    putInBox e =\n      let (sx,sy) = sizeOf e\n      in layers [e, collage sx sy [outlined (solid black) (rect (toFloat sx) (toFloat sy))]]\n    \n    moveBy (dx,dy) (x,y) = (x + toFloat dx, y - toFloat dy)\n    \n    main =\n      let update m =\n            case m of\n              Just (MoveBy (dx,dy)) -> moveBy (dx,dy)\n              _                     -> identity\n      in Signal.map (\\p -> collage 200 200 [Graphics.Collage.move p (toForm box)])\n                    (foldp update (0,0) (track False hover.signal))\n",
        "type": "Bool -> Signal.Signal Bool -> Signal.Signal (Maybe.Maybe DragAndDrop.Action)"
      },
      {
        "name": "trackMany",
        "comment": " Track several draggable items. The `Maybe a` and `Signal (Maybe\na)` arguments are the initial value and input signal which tell\nwhether the mouse is (currently) hovering over a draggable item, and\nover which one. An example use\n([Example2.elm](https://github.com/jvoigtlaender/elm-drag-and-drop/blob/master/Example2.elm),\nalso using `putInBox` and `moveBy` from above):\n\n    hover = Signal.mailbox Nothing\n    \n    box1 = Graphics.Input.hoverable (Signal.message hover.address << \\h -> if h then Just 1 else Nothing)\n                                    (putInBox (leftAligned (fromString \"drag-and-drop me\")))\n    \n    box2 = Graphics.Input.hoverable (Signal.message hover.address << \\h -> if h then Just 2 else Nothing)\n                                    (putInBox (leftAligned (fromString \"and me too\")))\n    \n    main =\n      let update m =\n            case m of\n              Just (1, MoveBy (dx,dy)) -> \\(p1,p2) -> (moveBy (dx,dy) p1, p2)\n              Just (2, MoveBy (dx,dy)) -> \\(p1,p2) -> (p1, moveBy (dx,dy) p2)\n              _                        -> identity\n      in Signal.map (\\(p1,p2) -> collage 200 200 [Graphics.Collage.move p1 (toForm box1),\n                                                  Graphics.Collage.move p2 (toForm box2)])\n                    (foldp update ((0,15), (0,-15)) (trackMany Nothing hover.signal))\n\nA more dynamic example can be found in\n[Example3.elm](https://github.com/jvoigtlaender/elm-drag-and-drop/blob/master/Example3.elm). ",
        "type": "Maybe.Maybe a -> Signal.Signal (Maybe.Maybe a) -> Signal.Signal (Maybe.Maybe ( a, DragAndDrop.Action ))"
      }
    ],
    "generated-with-elm-version": "0.16.0"
  }
]